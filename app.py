from flask import Flask, request
import requests
import os
import logging
import re
import openai

app = Flask(__name__)

logging.basicConfig(level=logging.INFO)

VERIFY_TOKEN = os.environ.get("VERIFY_TOKEN")
PAGE_ACCESS_TOKEN = os.environ.get("PAGE_ACCESS_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

def send_message(recipient_id, text):
    url = f"https://graph.facebook.com/v18.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    payload = {
        "recipient": {"id": recipient_id},
        "message": {"text": text}
    }
    headers = {'Content-Type': 'application/json'}
    res = requests.post(url, json=payload, headers=headers)
    logging.info("üì§ FB Send Response: %s %s", res.status_code, res.text)

def has_phone(text):
    # Regex ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam (b·∫Øt ƒë·∫ßu b·∫±ng 0 ho·∫∑c +84, sau ƒë√≥ l√† 9 s·ªë)
    return re.search(r'(0|\+84)\d{9}', text) is not None

def ask_gpt(prompt):
    messages = [
        {
            "role": "system",
            "content": (
                "B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n b√°n h√†ng chuy√™n nghi·ªáp c·ªßa Ph∆∞∆°ng B√¨nh Group. "
                "Lu√¥n h·ªèi kh√°ch h√†ng cung c·∫•p s·ªë ƒëi·ªán tho·∫°i c√≥ d√πng Zalo ƒë·ªÉ thu·∫≠n ti·ªán t∆∞ v·∫•n. "
                "N·∫øu kh√°ch ƒë√£ cung c·∫•p s·ªë ƒëi·ªán tho·∫°i r·ªìi th√¨ c·∫£m ∆°n h·ªç v√† tr·∫£ l·ªùi: "
                "'C·∫£m ∆°n anh/ch·ªã, s·∫Ω c√≥ nh√¢n vi√™n kinh doanh li√™n h·ªá t∆∞ v·∫•n chi ti·∫øt trong th·ªùi gian s·ªõm nh·∫•t!' "
                "Kh√¥ng h·ªèi l·∫°i s·ªë ƒëi·ªán tho·∫°i n·ªØa."
            )
        },
        {"role": "user", "content": prompt}
    ]
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",  # ho·∫∑c gpt-4 n·∫øu b·∫°n c√≥ quy·ªÅn
            messages=messages,
            max_tokens=300,
            temperature=0.7
        )
        logging.info("ü§ñ OpenAI SDK response: %s", response)
        return response.choices[0].message.content
    except Exception as e:
        logging.info("‚ùå OpenAI SDK error: %s", e)
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù."

@app.route("/", methods=["GET"])
def verify():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        return challenge, 200
    return "Invalid verification", 403

@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json()
    logging.info("üì© Nh·∫≠n data t·ª´ Facebook: %s", data)
    for entry in data.get("entry", []):
        for msg_event in entry.get("messaging", []):
            sender_id = msg_event['sender']['id']
            if 'message' in msg_event and 'text' in msg_event['message']:
                user_message = msg_event['message']['text']
                logging.info("‚úâÔ∏è Ng∆∞·ªùi d√πng g·ª≠i: %s", user_message)
                # N·∫øu kh√°ch ƒë√£ cho s·ªë ƒëi·ªán tho·∫°i, tr·∫£ l·ªùi c·∫£m ∆°n lu√¥n
                if has_phone(user_message):
                    reply = (
                        "C·∫£m ∆°n anh/ch·ªã, s·∫Ω c√≥ nh√¢n vi√™n kinh doanh li√™n h·ªá t∆∞ v·∫•n chi ti·∫øt trong th·ªùi gian s·ªõm nh·∫•t!"
                    )
                    send_message(sender_id, reply)
                else:
                    # Ch∆∞a c√≥ s·ªë, h·ªèi xin s·ªë qua GPT
                    reply = ask_gpt(user_message)
                    send_message(sender_id, reply)
    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
